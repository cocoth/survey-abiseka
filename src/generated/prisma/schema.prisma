// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleName {
  admin
  user
  guest
}

model Role {
  id        String    @id @default(cuid())
  name      RoleName  @unique
  User      User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  password        String?
  roleId          String
  session_token   String?
  role            Role              @relation(fields: [roleId], references: [id])
  Survey          Survey[]
  Survey_Response Survey_Response[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
}

model Data_PT {
  id                   String    @id @default(cuid())
  kode                 String?
  akreditasi           String?
  tanggal_berdiri      DateTime?
  no_SK_pendirian      String?
  tanggal_SK_pendirian String?
  alamat               String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  deletedAt            DateTime?
}

model Survey {
  id              String            @id @default(cuid())
  userID          String
  user            User              @relation(fields: [userID], references: [id])
  Survey_Field    Survey_Field[]
  Survey_Response Survey_Response[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
}

model Survey_Field {
  id                    String                  @id @default(cuid())
  surveyID              String
  survey                Survey                  @relation(fields: [surveyID], references: [id])
  field                 String?
  type                  String
  options               String?
  required              Boolean                 @default(false)
  Survey_Response_Field Survey_Response_Field[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
}

model Survey_Response {
  id                    String                  @id @default(cuid())
  surveyID              String
  survey                Survey                  @relation(fields: [surveyID], references: [id])
  userID                String?
  user                  User?                   @relation(fields: [userID], references: [id])
  Survey_Response_Field Survey_Response_Field[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
}

model Survey_Response_Field {
  id         String          @id @default(cuid())
  responseID String
  response   Survey_Response @relation(fields: [responseID], references: [id])
  fieldID    String
  field      Survey_Field    @relation(fields: [fieldID], references: [id])
  value      String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  deletedAt  DateTime?
}
